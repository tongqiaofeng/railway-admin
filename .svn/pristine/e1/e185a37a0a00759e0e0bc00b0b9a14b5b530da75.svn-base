{"remainingRequest":"G:\\aa-tong\\my-project\\D-project\\railwayAdmin_Web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\aa-tong\\my-project\\D-project\\railwayAdmin_Web\\src\\components\\Word-admin.vue?vue&type=template&id=b2887a08&scoped=true&","dependencies":[{"path":"G:\\aa-tong\\my-project\\D-project\\railwayAdmin_Web\\src\\components\\Word-admin.vue","mtime":1649331599004},{"path":"G:\\aa-tong\\my-project\\D-project\\railwayAdmin_Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\aa-tong\\my-project\\D-project\\railwayAdmin_Web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"G:\\aa-tong\\my-project\\D-project\\railwayAdmin_Web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"G:\\aa-tong\\my-project\\D-project\\railwayAdmin_Web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}